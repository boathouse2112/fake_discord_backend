generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider      = "zod-prisma"
    output        = "./models"
    // (default) the directory where generated zod schemas will be saved
    relationModel = "default"
    // (default) Create and export both plain and related models.
    // relationModel         = "default" // Do not export model without relations.
    // relationModel         = false // Do not generate related model
    modelCase     = "PascalCase"
    // (default) Output models using pascal case (ex. UserModel, PostModel)
    // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
    modelSuffix   = "Model"
    // (default) Suffix to apply to your prisma models when naming Zod schemas

    // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
    useDecimalJs = true
    // represent the prisma Decimal type using Decimal.js (as Prisma does)

    // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

    // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
    prismaJsonNullability = true
    // (default) uses prisma's scheme for JSON field nullability
    // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String  @id @default(uuid())
    username     String  @unique
    avatarURL    String?
    aboutMe      String
    profileColor String
    chats        Chat[]
}

model Chat {
    id       String    @id @default(uuid())
    users    User[]
    messages Message[]
}

model Message {
    id     String @id @default(uuid())
    chat   Chat   @relation(fields: [chatId], references: [id])
    chatId String
}
